/*

    Copyright Eli Dupree and Isaac Dupree, 2014

    This file is part of Lasercake.

    Lasercake is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    Lasercake is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with Lasercake.  If not, see <http://www.gnu.org/licenses/>.

*/



#define TIME_STEWARD_BASICS typedef time_steward_system:: entity_id entity_id;

#define USE_DEFAULT_TIME_TYPE typedef time_steward_system:: time_steward <time_steward_system:: fields_list <int> USE_DEFAULT_TIME_TYPE_HACK;\
typedef USE_DEFAULT_TIME_TYPE_HACK:: time_type time_type;\
const time_type never = USE_DEFAULT_TIME_TYPE_HACK:: never;\
const time_type min_time = USE_DEFAULT_TIME_TYPE_HACK:: min_time;\
const time_type Max_time = USE_DEFAULT_TIME_TYPE_HACK:: max_time;

#define BEGIN_FIELDS_LIST typedef time_steward_system:: fields_list <>
#define MAKE_FIELD(name, value_type) FIELDS_LIST_before_##name;\
struct name {};\
typedef time_steward_system:: fields_list < FIELDS_LIST_before_##name, time_steward_system:: field <name, value_type> >
#define FINISH_FIELDS_LIST FIELDS_LIST_final;

#define MAKE_TIME_STEWARD typedef time_steward_system:: time_steward <FIELDS_LIST_final> time_steward;\
typedef time_steward:: accessor accessor;\
typedef time_steward:: event event;\
typedef time_steward:: trigger trigger;\
typedef accessor:: entity_ref entity_ref;

#define MAKE_EVENT(name,) struct name: public time_steward:: event {\
name () {}\
void operator () (time_steward:: accessor* accessor) const override;\
}\
void name:: operator () (time_steward:: accessor* accessor) const

#define MAKE_TRIGGER(name,) const siphash_id DEFAULT_TRIGGER_HASH_##name (#name);\
MAKE_EVENT (__VA_ARGS__)

#define CAPTURE(ID, var_name) time_steward:: accessor :: entity_ref var_name = accessor->get (ID);
#define GET(entity, field) (accessor->get<field>(entity))
#define GET_MUTABLE(entity, field) (accessor->get_mut<field>(entity))
#define GET(entity, field, other_ID) (accessor->get<field>(entity, other_ID))
#define GET_MUTABLE(entity, field, other_ID) (accessor->get_mut<field>(entity, other_ID))
#define SET(entity, field, value) (accessor->set<field>(entity, value))
#define SET(entity, field, other_ID, value) (accessor->set<field>(entity, other_ID, value))

#define ANTICIPATE_EVENT(when, event_class, ...) accessor-> anticipate_event (when,std:: shared_ptr <event_class> (new event_class (__va_args__)))

#define SET_TRIGGER_DEFAULT(trigger_class, entity_id, ...) accessor->set_trigger(siphash_id:: combining (entity_id, DEFAULT_TRIGGER_HASH_##trigger_class),std:: shared_ptr <trigger_class> (new trigger_class (entity_ID,__VA_ARGS__)))
